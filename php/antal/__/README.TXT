
// __/README.txt

// Version: 1.0.
// Date:    2017-05-24.
// Author:  McArcher.

Приветствую всех, кто добрался до этого файла и читает его! 

Этот программный продукт является реализацией тестового задания. 
Текст задания указан в файле 'task.txt'. 

1. Про структуру программного продукта. 

Поскольку задание имеет весьма расплывчатые формы, то при реализации решения я исходил из принципа простоты и наглядности. Иными словами, структура программы сделана ради удобства чтения программного кода, а не ради оптимизации скорости выполнения скрипта. Если будет нужна максимальная производительность, то всё можно будет собрать в единый файл без "инклюдов", отбросить кучу конфигурационных переменных, объединить все string-и в один большой string, прописать всё, как говорят, вручную, и т.п.; но разбирать такой код на части, изучать и модифицировать будет намного сложнее, чем в данном случае. Обычно используют некие промежуточные варианты между режимами "юзабилити" и "перформанс". 

2. Как использовать данный продукт? 

2.1. В движке PHP на веб сервере должно быть включено расширение 'APCu'. 'APCu' это модификация старого 'APC', которое было написано для устаревшего PHP5. Новое 'APCu' написано для PHP7. Это расширение позволяет ускорить работу по хранению переменных в оперативной памяти. Является хорошей встроенной в PHP альтернативой использования внешних ресурсов типа 'Memcache(d)' и их аналогов. Для хранения больших объёмов данных нужна настройка APCu. Для этого тестового задания точной настройки APCu не нужно. 

2.2. В конфигурационном файле 'config.php' нужно прописать реквизиты доступа к базе данных MySQL. Подразумевается, что соединение происходит по IP адресу, сокеты не использованы. В СУБД должен быть уже создан нужный пользователь и нужная база данных для совершения тестовых действий. 

2.3. База данных должна быть пустой или, по крайней мере, не должна содержать таблицу с именем, совпадающим с названием нашей тестовой таблицы (см. переменную '$db_dbname').

2.4. Поскольку этот продукт тестовый, то здесь нет обычного интерфейса взаимодействия с пользователем. Перед использованием продукта нужно создать в базе данных рабочую таблицу. Для этого нужно запустить команду 'db_create_tables();'. "Команды" (если так можно выразиться) вставляются в рабочий файл в место, почеченное коментариями как 'MAIN WORKING AREA' (см. файл 'test.php'). Разные тестовые команды уже вставлены в нужный раздел, но закоментированы, для того чтобы ничего случайно не испортить. 

2.5. Поскольку СУБД MySQL имеет встроенный механизм кеширования данных, то я не стал усложнять программу и добавлять кеширование частых запросов на уровне клиента. Такие вещи обычно делают, если запросов очень много, сервер базы данных не справляется с нагрузкой, а клиент работает быстрее СУБД. В случае с PHP в качестве клиента может быть неочевидно, нужно ли кеширование на стороне клиента, ведь сам движок PHP (по сравнению с компилируемыми приложениями) работает весьма медленно. В данном случае реализован простой механизм без усложнения конструкции. 

2.6. Тестовое использование этого продукта в основном состоит из коментирования или снятия коментариев с кода в рабочей зоне. Это создаёт симуляцию работы полноценной системы, которую написать полностью не имеет смысла пока нет понимания полной картины проекта во всех её деталях. 

Автор: Владимир Макаркин a.k.a. McArcher. 
